pipeline {
    agent any

    environment {
        VENV = "${WORKSPACE}/venv"
        APP_ENV = 'development'
        DEBUG = 'True'
        DJANGO_SETTINGS_MODULE = 'messaging_app.settings'
        ALLOWED_HOSTS = '127.0.0.1,localhost'
        MESSAGE_DEFAULT_DAYS = '7'
        REGISTRY_URL = 'https://index.docker.io/v1/'
        IMAGE_NAME = 'slimzy29/messaging_app'

        // Injected from Jenkins credentials
        //SECRET_KEY = credentials('django-secret')
        DOCKER_HUB_CREDENTIALS = credentials('dockerhub-credentials')
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', 
                    credentialsId: 'github-credentials', 
                    url: 'https://github.com/adetuyiTolu/alx-backend-python.git'
            }
        }

        stage('Set up Python environment') {
            steps {
                sh '''
                    python3 -m venv "$VENV"
                    "$VENV/bin/pip" install --upgrade pip
                    "$VENV/bin/pip" install -r messaging_app/requirements.txt
                    "$VENV/bin/pip" install pytest pytest-django pytest-html pytest-cov
                '''
            }
        }

        stage('Run Tests') {
            steps {
                sh '''
                    mkdir -p messaging_app/test-reports
                    "$VENV/bin/pytest" \
                      --ds=messaging_app.settings \
                      --junitxml=messaging_app/test-reports/report.xml \
                      --html=messaging_app/test-reports/report.html \
                      --self-contained-html messaging_app/tests
                '''
            }
        }

        stage('Publish Reports') {
            steps {
                junit 'messaging_app/test-reports/report.xml'
                publishHTML([
                    allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: 'messaging_app/test-reports',
                    reportFiles: 'report.html',
                    reportName: 'Pytest HTML Report'
                ])
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    docker.withRegistry(env.REGISTRY_URL, 'dockerhub-credentials') {
                        def appImage = docker.build("${IMAGE_NAME}:${BUILD_NUMBER}")
                        appImage.push("${BUILD_NUMBER}")
                        appImage.push("latest")
                    }
                }
            }
        }
    }

    post {
        always {
            sh 'rm -rf "$VENV" || true'
        }
        success {
            echo "✅ Build, test, and Docker push succeeded!"
        }
        failure {
            echo "❌ Build failed. Check logs."
        }
    }
}
